{
    "compilerOptions": {
        "sourceMap": true,
        // Enable strictest settings like strictNullChecks & noImplicitAny.
        "strict": true,
        // Speed up compilation by assuming .d.ts files are valid.
        "skipLibCheck": true,
        // Prevent silly things.
        "forceConsistentCasingInFileNames": true,
        // Treat a defined property with the value of "undefined" as different than a missing property.
        // Disabled because it turns out we rely on this ambiguitity a lot when spreading {...rest} params to React components.
        // "exactOptionalPropertyTypes": true,
        // Target is only used for compiler warnings and errors, since we're not
        // generating code with tsc.
        "target": "ES2020",
        // Allow dynamic imports.
        "module": "esnext",
        // Use node-style resolution of modules.
        "moduleResolution": "node",
        // Allow importing non-TS files as "any".
        "noImplicitAny": false,
        // Import non-ES modules as default imports.
        "esModuleInterop": true,
        // Make relevant libraries "available" for the purpose of typechecking.
        "lib": [
            "esnext",
            "DOM.Iterable",
            "DOM"
        ],
        // Allow JSX syntax.
        "jsx": "react",
        // Allow importing JSON files.
        "resolveJsonModule": true,
        // Make certain "ambient types" available to the codebase.
        "types": [
            "node",
            "jest"
        ],
        // Don't actually output code to the filesystem, just typecheck it.
        "noEmit": true,
        // Dramatically speed up successive compilations.
        "incremental": true,
    },
    "include": [
        "packages/*/src/**/*.ts",
        "packages/*/src/**/*.tsx",
        "packages/*/src/**/*.json",
    ],
    "ts-node": {
        "transpileOnly": true,
        "transpiler": "ts-node/transpilers/swc",
        "files": true,
        "compilerOptions": {
            "module": "commonjs",
            "isolatedModules": false
        }
    }
}